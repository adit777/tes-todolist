{"version":3,"sources":["logo.svg","List.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","List","props","items","map","item","index","key","Component","App","handleSubmit","event","preventDefault","setState","state","todoItem","handleChange","target","value","onSubmit","this","onChange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mJAAAA,EAAOC,QAAU,IAA0B,kC,wJCiB5BC,MAff,SAAcC,GAEV,OACI,4BAEQA,EAAMC,MAAMC,KAAI,SAACC,EAAMC,GAAP,OAAiB,wBAAIC,IAAKD,GAAT,IAAkBD,EAAlB,UCU7BG,YAiCCA,Y,IAuENC,E,kDAzCb,WAAYP,GAAQ,IAAD,8BACjB,cAAMA,IAQRQ,aAAe,SAACC,GACdA,EAAMC,iBACN,EAAKC,SAAS,CACZV,MAAM,GAAD,mBAAM,EAAKW,MAAMX,OAAjB,CAAwB,EAAKW,MAAMC,WACxCA,SAAU,MAbK,EAiBnBC,aAAe,SAACL,GACd,EAAKE,SAAS,CACZE,SAAUJ,EAAMM,OAAOC,SAjBzB,EAAKJ,MAAQ,CACXC,SAAU,GACVZ,MAAO,IAJQ,E,qDA0BjB,OAEE,6BACE,0BAAMgB,SAAUC,KAAKV,cACnB,2BAAOQ,MAAOE,KAAKN,MAAMC,SAAUM,SAAUD,KAAKJ,eAClD,wCAGF,kBAAC,EAAD,CAAMb,MAAOiB,KAAKN,MAAMX,a,GApCdK,aClEEc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.63e20a3b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\nfunction List(props) {\r\n\r\n    return (\r\n        <ul>\r\n            {\r\n                props.items.map((item, index) => <li key={index}> {item} </li>)\r\n            }\r\n\r\n\r\n        </ul>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default List;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport List from './List';\n\n// 1. Component - Properties\nfunction Biodata(props) {\n  return <span>umur : {props.age}</span>\n}\n\nfunction Greeting(props) {\n  return <h1>Hallo {props.name} - <Biodata age={props.age} /> </h1>\n}\n\n//2. State\n\n\nclass Timer extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      time: props.start\n    }\n  }\n\n  //lifecycle\n  componentDidMount() {\n    this.addInterval = setInterval(() => this.increse(), 1000)\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.addInterval)\n  }\n\n  increse() {\n    //update state time setiap detik\n    this.setState((state, props) => ({\n      time: parseInt(state.time) + 1\n    }))\n  }\n\n\n  render() {\n    return (\n      <div> {this.state.time} Detik</div>\n    )\n  }\n}\n\n//3. Event\nclass Toggle extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      toggleStatus: true\n    }\n\n    this.handleClick = this.handleClick.bind(this)\n\n  }\n  handleClick() {\n    this.setState(state => ({\n      toggleStatus: !state.toggleStatus\n    }))\n  }\n\n  render() {\n    return (\n      <button onClick={this.handleClick} >\n        {this.state.toggleStatus ? 'ON' : 'OFF'}\n        <p>Kondisi sekarang {this.state.toggleStatus ? 'menyala' : 'mati'} </p>\n      </button>\n    )\n  }\n}\n\n//4.Todolist\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      todoItem: '',\n      items: []\n\n    }\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault()\n    this.setState({\n      items: [...this.state.items, this.state.todoItem],\n      todoItem: ''\n    })\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      todoItem: event.target.value\n    })\n\n  }\n\n  render() {\n\n    return (\n\n      <div>\n        <form onSubmit={this.handleSubmit} >\n          <input value={this.state.todoItem} onChange={this.handleChange} />\n          <button>Add</button>\n        </form>\n\n        <List items={this.state.items} />\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// const name = \"Sekolah Koding\";\n\n// function greet() {\n//   return \"Hallo \" + name\n// }\n\n\n// const element = <h1>{greet(name)} !!</h1>\n\n// ReactDOM.render(\n//   element,\n//   document.getElementById('master')\n// );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}